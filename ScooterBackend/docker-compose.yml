services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
      - "./.nginx/certs:/etc/nginx/certs:ro"
      - "./Scooter-React/build:/usr/share/nginx/html:ro"
      - "./.nginx/mime.types:/etc/nginx/mime.types:ro"
    networks:
      - scooter_bridge
    depends_on:
      - backend
      - postgres
      - redis
      - backend_brock
      - broker
  backend:
    container_name: backend_scooter
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8090:8000"
    restart: always
    depends_on:
      - postgres
      - broker
    env_file:
      - .env
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    networks:
      - scooter_bridge
  postgres:
    container_name: database
    image: postgres:13.3
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: always
    networks:
      - scooter_bridge

  redis:
    container_name: redis_db
    image: redis:7.4.1-alpine3.20
    ports:
      - "6479:6379"
    restart: always
    command: redis-server --replicaof no one --replica-read-only no --appendonly yes
    depends_on:
      - backend
    networks:
      - scooter_bridge

  broker:
    container_name: broker_rabbit
    image: rabbitmq:3.13.7-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    ports:
      - "5672:5672"
    networks:
      - scooter_bridge
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend_brock:
    container_name: scooter_brocker
    build:
      context: .
      dockerfile: Dockerfile.broker
    restart: always
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "5680:5680"
    networks:
      - scooter_bridge

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_LOGIN}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://37.77.105.239/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - 3030:3000
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - scooter_bridge

  prometheus:
    container_name: prometheus_metrics
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data/web.yml:/etc/prometheus/web.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web.yml'
    networks:
      - scooter_bridge

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    networks:
      - scooter_bridge

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - scooter_bridge

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./grafana_data

networks:
  scooter_bridge:
    driver: bridge
